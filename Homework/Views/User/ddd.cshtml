@{
    ViewData["Title"] = "Завдание 2 Форма";
}

@model Homework.Models.RegistrationModelForAnAppointment

<div class="container marketing ">
    <div class=" padding-boreder">

        <div class="mypadding-form  mycolor-form">
            <h3 class="mb-3 ">Завдание 1</h3>
            <br>
            <h4 class="mb-3">Форма регистрации на консультацию.</h4>
            <form asp-controller="User" asp-action="RegisterFirst"   method="post">
                <div class="form-group">
                    <label asp-for="FirstName">Имя:</label>
                    <input asp-for="FirstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label asp-for="SureName">Фамилия:</label>
                    <input asp-for="SureName" class="form-control" />
                </div>
                <div class="form-group">
                    <label asp-for="Email">Email:</label>
                    <input asp-for="Email"  class="form-control" />
                </div>
                <div class="form-group">
                    <label asp-for="DateOfConsultation">Желаемая дата консультации</label>
                    <input asp-for="DateOfConsultation" class="form-control" min="2022-09-01T00:00" />
                </div>
                <br />
                <button class="w-100 btn btn-primary btn-lg" type="submit">Зарегистрироваться</button>
            </form>
        </div>
        @{ if (Model != null)
            {
                <div id="modal-1" class="modal shown">
                    <span class="modal-close">
                        <svg viewbox="0 0 70 70">
                            <path class="close-x" d="M 10,10 L 30,30 M 30,10 L 10,30" />
                        </svg>
                    </span>
                    <div>
                        @Model.FirstName
                    </div>
                </div>
            }}
    </div>
</div>


<script>




    var formresults;
    window.onload = function () {
        //вызов фенкцию через 3с после загрузки страницы
        formresults = @ViewBag.Result;
        setTimeout(checkforms, 300);


    };

    function checkforms() {
        alert("checkforms");
        //вспливабще окно
        if (formresults == 1) {
            $('.overlay, #modal-1').addClass('shown');

            formresults = 2;
        }

        $('.overlay, .modals-close').click(
            function () {
                $('.modals, .overlay').removeClass('shown');
            });
    }

    // получить все елементы с класом .needs-validation
    const forms = document.querySelectorAll('.needs-validation')


    forms.forEach(function () {
        alert("forEach");
        if (form.classList.contains('input-validation-error')) {
            alert("555555");
        }
    });


        (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }
                if (form.classList('input-validation-error')) {
                    form.classList.add('was-validated')
                }

                form.classList.add('was-validated')
            }, false)
        })
    })();
</script>


